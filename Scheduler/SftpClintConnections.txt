// config class
public class SftpConnectionInfo
{
    public string Host { get; set; }
    public int Port { get; set; }
    public string Username { get; set; }
    public string Password { get; set; }
    public string PrivateKeyPath { get; set; }
    public string Passphrase { get; set; }
}
// factory class
public class SftpClientFactory
{
    public static SftpClient CreateSftpClient(SftpConnectionInfo connectionInfo)
    {
        if (!string.IsNullOrEmpty(connectionInfo.PrivateKeyPath))
        {
            var keyFile = new PrivateKeyFile(connectionInfo.PrivateKeyPath, connectionInfo.Passphrase);
            var keyAuthMethod = new PrivateKeyAuthenticationMethod(connectionInfo.Username, keyFile);
            var connInfo = new ConnectionInfo(connectionInfo.Host, connectionInfo.Port, connectionInfo.Username, keyAuthMethod);

            return new SftpClient(connInfo);
        }
        else if (!string.IsNullOrEmpty(connectionInfo.Password))
        {
            return new SftpClient(connectionInfo.Host, connectionInfo.Port, connectionInfo.Username, connectionInfo.Password);
        }
        else
        {
            throw new ArgumentException("Invalid authentication method provided.");
        }
    }
}

// usage of class
class Program
{
    static void Main(string[] args)
    {
        var sftpConnectionInfo = new SftpConnectionInfo
        {
            Host = "sftp.example.com",
            Port = 22,
            Username = "tester",
            Password = "yourpassword",
            PrivateKeyPath = "path/to/private/key",
            Passphrase = "yourpassphrase"
        };

        SftpClient sftpClient = SftpClientFactory.CreateSftpClient(sftpConnectionInfo);

        try
        {
            sftpClient.Connect();
            Console.WriteLine("Connected to SFTP server successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            if (sftpClient.IsConnected)
            {
                sftpClient.Disconnect();
                Console.WriteLine("Disconnected from SFTP server.");
            }
        }
    }
}
///////////
using Renci.SshNet;
using System;

class SftpClientFactory
{
    public static (SftpClient, bool) CreateSftpClient(SftpConnectionInfo connectionInfo)
    {
        SftpClient client = null;

        try
        {
            if (!string.IsNullOrEmpty(connectionInfo.PrivateKeyPath))
            {
                var keyFile = new PrivateKeyFile(connectionInfo.PrivateKeyPath, connectionInfo.Passphrase);
                var keyAuthMethod = new PrivateKeyAuthenticationMethod(connectionInfo.Username, keyFile);
                var connInfo = new ConnectionInfo(connectionInfo.Host, connectionInfo.Port, connectionInfo.Username, keyAuthMethod);

                client = new SftpClient(connInfo);
            }
            else if (!string.IsNullOrEmpty(connectionInfo.Password))
            {
                client = new SftpClient(connectionInfo.Host, connectionInfo.Port, connectionInfo.Username, connectionInfo.Password);
            }
            else
            {
                throw new ArgumentException("Invalid authentication method provided.");
            }

            client.Connect();
            return (client, true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            client?.Dispose();
            return (null, false);
        }
    }
}
//////Auth Mode
public enum AuthenticationMethod
{
    UserAndPassword,
    PrivateKeyWithPassphrase,
    PrivateKeyWithoutPassphrase
}
/////////////
public class User
{
    public int Id { get; set; }
    public string Username { get; set; }
    public AuthenticationMethod AuthMethod { get; set; }
}


/////////////
public class AppDbContext : DbContext
{
    public DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<User>()
            .Property(u => u.AuthMethod)
            .HasConversion<string>();
    }
}

///////////////
using (var context = new AppDbContext())
{
    var user = new User
    {
        Username = "tester",
        AuthMethod = AuthenticationMethod.PrivateKeyWithPassphrase
    };
    
    context.Users.Add(user);
    context.SaveChanges();
}
/////////
using (var context = new AppDbContext())
{
    var user = context.Users.FirstOrDefault(u => u.Username == "tester");
    Console.WriteLine($"Username: {user.Username}, Auth Method: {user.AuthMethod}");
}

///////////////////////////////////////////////////
public class SftpService
{
    private readonly SftpClient _receiveClient;
    private readonly SftpClient _sendClient;

    public SftpService(SftpConnectionInfo receiveConnectionInfo, SftpConnectionInfo sendConnectionInfo)
    {
        var (receiveClient, receiveSuccess) = SftpClientFactory.CreateSftpClient(receiveConnectionInfo);
        var (sendClient, sendSuccess) = SftpClientFactory.CreateSftpClient(sendConnectionInfo);

        if (!receiveSuccess || !sendSuccess)
        {
            throw new Exception("Failed to establish SFTP connections.");
        }

        _receiveClient = receiveClient;
        _sendClient = sendClient;
    }

    public void ReceiveAndSendFiles(string remoteReceivePath, string localPath, string remoteSendPath)
    {
        try
        {
            // Receive files from receiveClient
            var files = _receiveClient.ListDirectory(remoteReceivePath);
            foreach (var file in files)
            {
                if (!file.IsDirectory)
                {
                    using (var fileStream = File.OpenWrite(Path.Combine(localPath, file.Name)))
                    {
                        _receiveClient.DownloadFile(file.FullName, fileStream);
                    }

                    // Upload the file to sendClient
                    using (var fileStream = File.OpenRead(Path.Combine(localPath, file.Name)))
                    {
                        _sendClient.UploadFile(fileStream, Path.Combine(remoteSendPath, file.Name));
                    }
                }
            }
        }
        finally
        {
            _receiveClient.Disconnect();
            _sendClient.Disconnect();
        }
    }
}
------
class Program
{
    static void Main(string[] args)
    {
        var receiveConnectionInfo = new SftpConnectionInfo
        {
            Host = "receive.example.com",
            Port = 22,
            Username = "receiveUser",
            Password = "receivePassword",
            PrivateKeyPath = "path/to/receive/private/key",
            Passphrase = "receivePassphrase"
        };

        var sendConnectionInfo = new SftpConnectionInfo
        {
            Host = "send.example.com",
            Port = 22,
            Username = "sendUser",
            Password = "sendPassword",
            PrivateKeyPath = "path/to/send/private/key",
            Passphrase = "sendPassphrase"
        };

        var sftpService = new SftpService(receiveConnectionInfo, sendConnectionInfo);
        sftpService.ReceiveAndSendFiles("/remote/receive/path", "local/path", "/remote/send/path");

        Console.WriteLine("Files received and sent successfully.");
    }
}
